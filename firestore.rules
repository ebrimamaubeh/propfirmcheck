/**
 * @file Firestore Security Rules
 * @description This ruleset allows public read access to prop firms and blog posts, while restricting write access to authenticated users (admins).
 *
 * Data Structure:
 * - /prop_firms/{propFirmId}: Stores prop firm data. Publicly readable.
 * - /blogPosts/{postId}: Stores blog post data. Publicly readable, write access restricted to authenticated users.
 *
 * Key Security Decisions:
 * - Public read access to prop firm and blog post data.
 * - Only authenticated users (admins) can create, update, or delete prop firms or blog posts.
 * - Data validation is relaxed to allow for rapid prototyping but create, update and delete rules are protected using authentication checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to prop firm data and restricts write access to authenticated users.
     * @path /prop_firms/{propFirmId}
     * @allow (get, list): Any user can read prop firm data.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete prop firm data.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete prop firm data.
     * @principle Allows public read access but secures write operations to authenticated users.
     */
    match /prop_firms/{propFirmId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to blog posts and restricts write access to authenticated users.
     * @path /blogPosts/{postId}
     * @allow (get, list): Any user can read blog posts.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete blog posts.
     * @deny (create, update, delete): Unauthenticated users cannot create, update, or delete blog posts.
     * @principle Allows public read access but secures write operations to authenticated users.
     */
    match /blogPosts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}